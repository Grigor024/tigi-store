const axios = require('axios');
const nodemailer = require('nodemailer');

// Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
const sendTelegramAlert = async (order) => {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;

  const message = `üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\nüë§ –ò–º—è: ${order.customer.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.customer.phone}\nüì¶ –ê–¥—Ä–µ—Å: ${order.customer.address}\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.customer.comment || '‚Äî'}\n\nüìã –¢–æ–≤–∞—Ä—ã:\n${order.items.map(i => `‚Ä¢ ${i.name} √ó${i.quantity}`).join('\n')}\n\nüí∞ –ò—Ç–æ–≥–æ: $${order.total.toFixed(2)}`;

  try {
    await axios.post(`https://api.telegram.org/bot${token}/sendMessage`, {
      chat_id: chatId,
      text: message,
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Telegram:', error.message);
  }
};

// Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
const sendEmailAlert = async (order) => {
  const transporter = nodemailer.createTransport({
    service: 'gmail', // –∏–ª–∏ –¥—Ä—É–≥–∞—è –ø–æ—á—Ç–∞
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });

  const message = {
    from: `"–ú–∞–≥–∞–∑–∏–Ω" <${process.env.EMAIL_USER}>`,
    to: process.env.EMAIL_TO,
    subject: 'üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
    text: `
–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:

–ò–º—è: ${order.customer.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${order.customer.phone}
–ê–¥—Ä–µ—Å: ${order.customer.address}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.customer.comment || '‚Äî'}

–¢–æ–≤–∞—Ä—ã:
${order.items.map(i => `‚Ä¢ ${i.name} √ó${i.quantity}`).join('\n')}

–ò—Ç–æ–≥–æ: $${order.total.toFixed(2)}
    `,
  };

  try {
    await transporter.sendMail(message);
  } catch (err) {
    console.error('‚ùå Email –æ—à–∏–±–∫–∞:', err.message);
  }
};




// Eail to user

const sendCustomerConfirmation = async (order) => {
  const transporter = nodemailer.createTransport({
    service: 'gmail', // –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });

  const message = {
    from: `"–ú–∞–≥–∞–∑–∏–Ω" <${process.env.EMAIL_USER}>`,
    to: order.customer.email, // ‚Üê –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    subject: '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω',
    text: `
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${order.customer.name}!

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑. –í–æ—Ç –µ–≥–æ –¥–µ—Ç–∞–ª–∏:

üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.customer.phone}
üì¶ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${order.customer.address}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.customer.comment || '‚Äî'}

üìã –¢–æ–≤–∞—Ä—ã:
${order.items.map(i => `‚Ä¢ ${i.name} √ó${i.quantity}`).join('\n')}

üí∞ –ò—Ç–æ–≥–æ: $${order.total.toFixed(2)}

–ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏!
  `,
  };

  try {
    await transporter.sendMail(message);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É:', err.message);
  }
};


// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
const notifyAdmin = async (order) => {
  await sendTelegramAlert(order);             // –∞–¥–º–∏–Ω—É –≤ Telegram
  await sendEmailAlert(order);                // –∞–¥–º–∏–Ω—É –Ω–∞ –ø–æ—á—Ç—É
  await sendCustomerConfirmation(order);      // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –ø–æ—á—Ç—É ‚Üê –î–û–ë–ê–í–ò–õ–ò
};


module.exports = {
  notifyAdmin,
};
